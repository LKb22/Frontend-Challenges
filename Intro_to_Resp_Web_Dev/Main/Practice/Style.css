


/* Headboard:

.navigation{

}

.logo{

}

*/

/* structure: */
.container{
    color: orange;
    font-size: 22px;
}

div.main{
    color: #eeff00;
    font-size: 12px;
}

div.box{
    font-size: 30px;
    color: rgb(0, 128, 0);
    background-color: rgb(212 212 223);

    /* Normally, we will use min-height to align boxes and elements and make them visually more uniform.
        In general it is not common to use fixed or maximum heights. */
    width: 300px;
    height: 400px;
    min-width: 500px;
    max-width: 600px;
    min-height: 450px;
    max-height: 500px;

    /* To center the box, you can use auto: */
    margin-top: 20px;
    margin-bottom: 10px;
    margin-left: auto;
    margin-right: auto;
    /* You can also use the margin property, which can receive the four values in one line, starting at the top and going clockwise: */
    margin: 20px 30px 10px 15px;
    /* With two values, the first applies to the top and bottom and the second to the right and left: */
    margin: 20px 30px;
    /* One value applies to all four sides: */
    margin: 35px;

    /* Padding uses a very similar system: */
    padding-left: 20px;
    padding-top: 10px;
    padding-bottom: 15px;
    padding-right: 25px;
    /* When you select the element in the inspecter, you will see that the width and height is the sum of the box plus the padding plus the border on each side respectively.
        This is a serious issue when we use percentage widths in a responsive context.
        For example, we won't know the final width of a column with 50% occupancy plus padding.
        We can solve this by restting the box model, which has been added at the beginning of the CSS. */
}

/* The display property allows you to show or hide elements, or to change the way they look, for example a line tag. */
div.display{
    /* We can use 'none' to hide the element */
    display: none;
    /* We can use 'inline' to make the element, for example a block, behave like a line element: */
    display: inline;
    /* And vice versa: */
    display: block;
    /* In the same way, inline-block will behave like a line element in the sense that it doesn't cause a line break, but it will sccept typical properties of a block, like margins: */
    display: inline-block;
    font-weight: 400;
    font-style: normal;
      }      

/* Using overflow: */
div.overflow{
    max-width: 50px;
    max-height: 50px;
    color: rgb(0, 128, 0);
    background-color: rgb(212 212 223);
    display: block;
    /* Hidden hides the content that exceeds the container. */
    overflow: hidden;
    /* Scroll allows the user to scroll the content that exceeds the container. */
    overflow: scroll;
    /* Visible allows the excess content to be show outside of the container boundaries. */
    overflow: visible;
    /* Auto in principle allows the browser to choose when to apply a 'scroll'. */
    overflow: auto;
}

div.borderbox{
    border-width: 5px;
    border-top-width: 10;
    border-right-width: 10;
    border-style: dashed;
    border-style: dotted;
    border-color: #383838;
    border: 10px solid #ff0000;
    border-top-left-radius: 40;
    border-bottom-left-radius: 30;
    border-radius: 50px 20px 15px 10px; /* Accepts up to four values */
}

/* Box-shadow: [inset] X axis, Y axis, Blur, Spacing, Color (Positive values right and bottom; negative left and above)*/
div.radius1{
    background-color: antiquewhite;
    width: 200px;
    height: 200px;
    margin: 50px;
    display: inline-block;
    border-radius: 20px;
    box-shadow: -50px 5px 10px 20px rgb(204, 15, 15);
}
div.radius2{
    background-color: antiquewhite;
    width: 200px;
    height: 200px;
    margin: 50px;
    display: inline-block;
    border-radius: 159px 50px;
    box-shadow: inset 5px -5px 10px 20px rgba(238, 59, 5, 0.527);
}
div.radius3{
    background-color: antiquewhite;
    width: 200px;
    height: 200px;
    margin: 50px;
    display: inline-block;
    border-radius: 10px 20px 50px 30px;
    box-shadow: inset 11px 84px 10px 20px rgba(208, 5, 238, 0.53);
}
div.radius4{
    background-color: antiquewhite;
    width: 442px;
    height: 319px;
    margin: 50px;
    display: inline-block;
    border-radius: 50%;
    box-shadow: inset 53px 55px 27px 20px rgba(5, 238, 14, 0.31);
}

div.responsive_structure1{
    background-color: antiquewhite;
    width: 50%;
    height: 200px;
    margin: 10px;
    display: inline-block;
}
div.responsive_structure2{
    background-color: antiquewhite;
    width: 40%;
    height: 200px;
    margin: 10px;
    display: inline-block;
}

div.Image{
    background-color: antiquewhite;
    width: 70%;
    height: 300px;
    margin: 50px;
    display: inline-block;
    border-radius: 50px;
    background-image: url(Images/Tree.jpeg);
    background-repeat: no-repeat;
    background-position: right bottom;
    background-position: right 20px bottom 30px;
    /* For size, x axis , y axis (use auto on the x or y axis to keep the image proportions)
    * OR, to maintain the complete image sized to the container, simply use 'contain'.
    * On the other hand, 'cover' will stretch the image to the size of the container, cutting off however much of the image required. */
    background-size: 200px 100px;
    background-size: 200px auto;
    background-size: cover;
    background-size: contain;
    /* You can use the reduced version with 'background' 
    background: aqua url(Images/Tree.jpeg) no-repeat right 20px bottom 30px; */
}

/* Using float: */
/* You can use a width percentage and a float to form, for example, paragraph columns. */
html body div.One{
    display: block;
    background-color: rgba(44, 23, 231, 0.336);
    color: rgb(0, 128, 0);
    width: 50%;
    overflow: scroll;
    float: none;
    /* Float 'Right': causing the blocks to float in the opposite direction, but they will also change order. */
    float: right;
    /* Float 'Left': causing the blocks to stop doing a line break and have one element placed next to the other. */
    float: left;
}

html body div.Two{
    display: block;
    background-color: rgba(141, 32, 168, 0.514);
    color: rgb(0, 30, 128);
    width: 50%;
    overflow: scroll;
    float: none;
    float: right;
    float: left;
}

/* 'Position: absolute' We can use position: absolute; top/right/bottom/left to bring an element out of the flow and position it in a specific part of the browser window. */
html body div.position{
    display: inline-block;
    background-color: rgba(0, 0, 0, 0.479);
    margin: auto;
    width: 50%;
    padding: 10px;
    /* By adding 'position: relative' to the container, the elements inside are then positioned within the container instead of the entire browser. */
    position: relative;
}
/* Since there are two spans, the second naturally covers the first. */
span{
    display: block;
    z-index: 1;
}

.position p{
    display: block;
    padding: auto;
}

.position span{
    background-color: orange;
    display: block;
    padding: auto;
    position: absolute;
    right: 70;
    left: 70;
    top: 0;
    z-index: 1;
}

html body span.alt{
    background-color: rgba(0, 4, 255, 0.384);
    display: block;
    padding: auto;
    position: absolute;
    right: 1;
    left: 10;
    top: 0;
    z-index: 0;
}

.main p{
    color: purple;
    font-size: 2em;
}

.main span{
    color: #eeff00;
    display: none;
    display: inline-block;
    background-color: rgba(0, 0, 255, 0.404);
}

.main p span{
    color: hsla(98, 100%, 25%, 0.42);
    color: #eeff00;
    display: none;
    display: inline;
    background-color: rgba(255, 102, 0, 0.404);
}

#contact{
    color: rgba(0, 242, 255, 0.55);
}

/* footer styles:

.footer{

}
*/

/* Pages:
Now that you have written your general page styles, you can start writing your CSS code for specific pages.

.contact{

}
*/

/* Pseudo-classes: These are indicated with a :
 * This code calls on only a specific class.
*/

/* Style a link: */

a,
a{
    color: rgb(0, 128, 0);
    text-decoration: none;
}

a:visited{
    color: blue;
}

a:hover{
    text-decoration: underline;
}

a:active{
    color: orange;
}

a:focus{
    background-color: yellowgreen;
}
